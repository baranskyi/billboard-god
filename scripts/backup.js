#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class BackupManager {
  constructor() {
    this.dataPath = process.env.DATA_PATH || './data';
    this.uploadsPath = process.env.UPLOADS_PATH || './uploads';
    this.backupPath = './backups';
  }

  // –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
  async createBackup() {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...');
      
      // –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
      await fs.mkdir(this.backupPath, { recursive: true });
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupFile = path.join(this.backupPath, `backup-${timestamp}.tar.gz`);
      
      // –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤
      const command = `tar -czf "${backupFile}" "${this.dataPath}" "${this.uploadsPath}"`;
      await execAsync(command);
      
      console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupFile}`);
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
      await this.cleanOldBackups();
      
      return backupFile;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', err);
      throw err;
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
  async restoreBackup(backupFile) {
    try {
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ ${backupFile}...`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      await fs.access(backupFile);
      
      // –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      const tempDir = './temp_restore';
      await fs.mkdir(tempDir, { recursive: true });
      
      // –ò–∑–≤–ª–µ—á—å –∞—Ä—Ö–∏–≤
      const command = `tar -xzf "${backupFile}" -C "${tempDir}"`;
      await execAsync(command);
      
      // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      const tempDataPath = path.join(tempDir, path.basename(this.dataPath));
      const tempUploadsPath = path.join(tempDir, path.basename(this.uploadsPath));
      
      if (await this.exists(tempDataPath)) {
        await this.copyDir(tempDataPath, this.dataPath);
      }
      
      if (await this.exists(tempUploadsPath)) {
        await this.copyDir(tempUploadsPath, this.uploadsPath);
      }
      
      // –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      await execAsync(`rm -rf "${tempDir}"`);
      
      console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
      throw err;
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  async autoBackup() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫–∞–ø–∞
      const hasData = await this.hasExistingData();
      
      if (hasData) {
        console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞...');
        await this.createBackup();
      }
    } catch (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞:', err);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  async hasExistingData() {
    try {
      const dataFiles = await fs.readdir(this.dataPath);
      return dataFiles.some(file => file.endsWith('.json'));
    } catch {
      return false;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
  async cleanOldBackups() {
    try {
      const files = await fs.readdir(this.backupPath);
      const backupFiles = files
        .filter(file => file.startsWith('backup-') && file.endsWith('.tar.gz'))
        .map(file => ({
          name: file,
          path: path.join(this.backupPath, file),
          time: fs.stat(path.join(this.backupPath, file)).then(stat => stat.mtime)
        }));

      // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      for (let file of backupFiles) {
        file.time = await file.time;
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
      backupFiles.sort((a, b) => b.time - a.time);

      // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ (–æ—Å—Ç–∞–≤–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
      const toDelete = backupFiles.slice(10);
      
      for (let file of toDelete) {
        await fs.unlink(file.path);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file.name}`);
      }
    } catch (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤:', err);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async exists(path) {
    try {
      await fs.access(path);
      return true;
    } catch {
      return false;
    }
  }

  async copyDir(src, dest) {
    await fs.mkdir(dest, { recursive: true });
    const command = `cp -R "${src}/"* "${dest}/"`;
    await execAsync(command);
  }

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
  async listBackups() {
    try {
      const files = await fs.readdir(this.backupPath);
      const backupFiles = files
        .filter(file => file.startsWith('backup-') && file.endsWith('.tar.gz'))
        .sort()
        .reverse();

      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:');
      backupFiles.forEach((file, index) => {
        console.log(`${index + 1}. ${file}`);
      });

      return backupFiles;
    } catch (err) {
      console.log('üìã –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return [];
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const backup = new BackupManager();
  const command = process.argv[2];

  switch (command) {
    case 'create':
      backup.createBackup();
      break;
    case 'restore':
      const backupFile = process.argv[3];
      if (!backupFile) {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node backup.js restore <—Ñ–∞–π–ª_–±—ç–∫–∞–ø–∞>');
        process.exit(1);
      }
      backup.restoreBackup(backupFile);
      break;
    case 'list':
      backup.listBackups();
      break;
    case 'auto':
      backup.autoBackup();
      break;
    default:
      console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node backup.js create          - —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
  node backup.js restore <file>  - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
  node backup.js list           - —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
  node backup.js auto           - –∞–≤—Ç–æ–±—ç–∫–∞–ø
      `);
  }
}

module.exports = BackupManager;
